// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String @unique @db.ObjectId
  name    String
  email   String
  imageUrl String?
  role    String      @default("user")
  phone String?

  addresses ShippingInfo[]
  orders Order[]
  reviews Review[]

  seller Seller?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
  imageUrl String
  phone String
  address String

  status String @default("pending")

  userId String @unique @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders SellerOrder[]
  bank Bank?
  withdraws Withdraw[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bank {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  current Int
  pending Int
  withdraw Int
  total Int

  sellerId String @unique @db.ObjectId
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Withdraw {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  amount Int
  method String
  number String
  status String @default("pending")

  sellerId String @db.ObjectId
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscriber {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique @db.ObjectId
  imageUrl String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String?
  imageUrl String
  tags String[] @default([])

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Product {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  description String
  featureImageUrl String
  images  String[] @default([])
  totalStock  Int?
  price Int
  discountPrice Int?
  sellerPrice Int?
  status  String @default("DRAFT")
  tags String[] @default([])
  colors String[] @default([])
  genre String[] @default([])
  featureTitle String?
  averageRating    Float      @default(0.0)
  ratingCount      Int        @default(0)
  totalSell Int @default(0)

  categoryId String? @db.ObjectId
  category  Category? @relation(fields: [categoryId], references: [id])

  brandId String? @db.ObjectId
  brand  Brand? @relation(fields: [brandId], references: [id])

  stocks Stock[]
  orderProducts OrderProduct[]
  sellerOrderProducts SellerOrderProduct[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Stock {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  stock Int
  size  String
  color String?

  productId String? @db.ObjectId
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Coupon {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  code String
  imageUrl String?
  value Int
  startDate DateTime
  expiryDate DateTime
  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ShippingInfo {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  name String
  division String
  address String
  phone String

  userId String? @db.ObjectId
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Order {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId String
  total Int
  status String @default("pending")
  paymentMethod String
  paymentStatus String? @default("unpaid")
  deliveryFee Int @default(120)
  trackingId String?

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  shippingInfoId String @db.ObjectId
  shippingInfo ShippingInfo @relation(fields: [shippingInfoId], references: [id])

  products OrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  size String?
  color String?
  price Int  

  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model SellerOrder {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId String 
  customerName String
  address String
  mobile String
  total Int
  deliveryFee Int
  status String @default("pending")
  trackingId String?

  sellerId String @db.ObjectId
  seller Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  products SellerOrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerOrderProduct {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  price Int
  sellPrice Int
  quantity Int
  size String?
  color String?

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id])

  orderId String @db.ObjectId
  order SellerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Review {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  rating Float 
  comment String

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl String
  status String @default("draft")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

